#include <iostream>
#include <string>

// Incluir la lista simplemente ligada que ya está definida
#include "ListaLigada.h"

// Definición de la clase SocioClub
class SocioClub {
private:
    int numeroSocio;
    std::string nombre;
    std::string domicilio;
public:
    SocioClub(){}
    SocioClub(int numero, const std::string& nombre, const std::string& domicilio)
        : numeroSocio(numero), nombre(nombre), domicilio(domicilio) {}

    // Sobrecarga del operador < para ordenar por número de socio
    bool operator<(const SocioClub& otro) const {
        return numeroSocio < otro.numeroSocio;
    }

    // Función para mostrar los datos del socio
    void mostrarDatos() const {
        std::cout << "Número de socio: " << numeroSocio << "\n";
        std::cout << "Nombre: " << nombre << "\n";
        std::cout << "Domicilio: " << domicilio << "\n";
    }

    // Función para obtener el número de socio
    int getNumeroSocio() const {
        return numeroSocio;
    }

    // Función para buscar por nombre y domicilio
    bool buscar(const std::string& nombreBuscar, const std::string& domicilioBuscar) const {
        return (nombre == nombreBuscar && domicilio == domicilioBuscar);
    }
};

// Función para mostrar el menú y procesar las opciones
void mostrarMenu(LSLSE<SocioClub>& listaSocios) {
    int opcion;
    do {
        std::cout << "\nMenú de opciones:\n";
        std::cout << "1. REGISTRAR\n";
        std::cout << "2. DAR DE BAJA\n";
        std::cout << "3. REPORTE DE SOCIOS\n";
        std::cout << "4. BUSQUEDA POR NOMBRE Y DOMICILIO\n";
        std::cout << "5. CALCULAR E IMPRIMIR SOCIOS REGISTRADOS\n";
        std::cout << "6. SALIR\n";
        std::cout << "OPCION: ";
        std::cin >> opcion;

        switch (opcion) {
            case 1: {
                int numero;
                std::string nombre, domicilio;
                std::cout << "NUMERO: ";
                std::cin >> numero;
                std::cout << "NOMBRE: ";
                std::cin.ignore();
                std::getline(std::cin, nombre);
                std::cout << "DOMICILIO: ";
                std::getline(std::cin, domicilio);

                // Verificar si ya existe un socio con ese número
                bool existe = false;
                node<SocioClub>* aux = listaSocios.primero();
                while (aux != nullptr) {
                    if (aux->getData().getNumeroSocio() == numero) {
                        existe = true;
                        break;
                    }
                    aux = aux->getSig();
                }

                if (existe) {
                    std::cout << "YA EXISTE UN SOCIO CON ESE NUMERO\n";
                } else {
                    SocioClub nuevoSocio(numero, nombre, domicilio);
                    listaSocios.insertar(listaSocios.ultimo(), nuevoSocio);
                    std::cout << "SOCIO REGISTRADO\n";
                }
                break;
            }
            case 2: {
                int numeroBaja;
                std::cout << "NUMERO PARA BAJA: ";
                std::cin >> numeroBaja;

                bool encontrado = false;
                node<SocioClub>* aux = listaSocios.primero();
                while (aux != nullptr) {
                    if (aux->getData().getNumeroSocio() == numeroBaja) {
                        listaSocios.eliminar(aux);
                        encontrado = true;
                        std::cout << "SOCIO DADO DE BAJA\n";
                        break;
                    }
                    aux = aux->getSig();
                }

                if (!encontrado) {
                    std::cout << "SOCIO NO ENCONTRADO\n";
                }
                break;
            }
            case 3: {
                listaSocios.imprimir();
                break;
            }
            case 4: {
                std::string nombreBuscar, domicilioBuscar;
                std::cout << "NOMBRE DEL SOCIO: ";
                std::cin.ignore();
                std::getline(std::cin, nombreBuscar);
                std::cout << "DOMICILIO DEL SOCIO: ";
                std::getline(std::cin, domicilioBuscar);

                node<SocioClub>* aux = listaSocios.primero();
                bool encontrado = false;
                while (aux != nullptr) {
                    if (aux->getData().buscar(nombreBuscar, domicilioBuscar)) {
                        aux->getData().mostrarDatos();
                        encontrado = true;
                        break;
                    }
                    aux = aux->getSig();
                }

                if (!encontrado) {
                    std::cout << "SOCIO NO ENCONTRADO\n";
                }
                break;
            }
            case 5: {
                std::cout << "TOTAL DE SOCIOS REGISTRADOS: " << listaSocios.totalElementos() << "\n";
                break;
            }
            case 6:
                std::cout << "SALIENDO\n";
                break;
            default:
                std::cout << "OPCION NO VALIDA || INTENTAR DE NUEVO\n";
                break;
        }
    } while (opcion != 6);
}

int main() {
    LSLSE<SocioClub> listaSocios;

    // EJEMPLO
    SocioClub socio1(1001, "FULANO2", "CALLE 1");
    SocioClub socio2(1002, "MANGANO", "CALLE 2");
    SocioClub socio3(1003, "PERENGANI", "CALLE 3");

    listaSocios.insertar(listaSocios.ultimo(), socio1);
    listaSocios.insertar(listaSocios.ultimo(), socio2);
    listaSocios.insertar(listaSocios.ultimo(), socio3);

    // Mostrar el menú de opciones
    mostrarMenu(listaSocios);

    return 0;
}
